//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace BTVSchedule.BTVLibrary {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BTVLibrarySoap", Namespace="http://www.snapstream.com/WebService")]
    public partial class BTVLibrary : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFoldersByRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFolder2OperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFolder3OperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditMediaOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserSpecificPropertyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMediaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllClipsWithFilterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyClipsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClipsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllMediaWithFilterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMediaOperationCompleted;
        
        private System.Threading.SendOrPostCallback FlatViewClipsByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FlatViewByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FlatViewByDate2OperationCompleted;
        
        private System.Threading.SendOrPostCallback FlatViewByTitleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSeriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSeriesByRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemsBySeriesWithFilterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSeriesWithFilterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemsByFolderWithFilterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderWithFilterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemsBySeriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemsByFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemsByJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMediaByFullNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDriveInformationByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdvancedSearchCCOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdvancedSearchCCWithSuggestionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOldestUnlockedMediaDateTicksOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdvancedSearchCCCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdvancedSearchCCCountWithSuggestionOperationCompleted;
        
        private System.Threading.SendOrPostCallback LuceneHighlightStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatsInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderMediaCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BTVLibrary() {
            this.Url = global::BTVSchedule.Properties.Settings.Default.BTVSchedule_BTVLibrary_BTVLibrary;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetFoldersCompletedEventHandler GetFoldersCompleted;
        
        /// <remarks/>
        public event GetFoldersByRangeCompletedEventHandler GetFoldersByRangeCompleted;
        
        /// <remarks/>
        public event GetFolderCompletedEventHandler GetFolderCompleted;
        
        /// <remarks/>
        public event GetLastChangeCompletedEventHandler GetLastChangeCompleted;
        
        /// <remarks/>
        public event AddFolderCompletedEventHandler AddFolderCompleted;
        
        /// <remarks/>
        public event AddFolder2CompletedEventHandler AddFolder2Completed;
        
        /// <remarks/>
        public event AddFolder3CompletedEventHandler AddFolder3Completed;
        
        /// <remarks/>
        public event RemoveFolderCompletedEventHandler RemoveFolderCompleted;
        
        /// <remarks/>
        public event EditMediaCompletedEventHandler EditMediaCompleted;
        
        /// <remarks/>
        public event SetUserSpecificPropertyCompletedEventHandler SetUserSpecificPropertyCompleted;
        
        /// <remarks/>
        public event DeleteMediaCompletedEventHandler DeleteMediaCompleted;
        
        /// <remarks/>
        public event GetAllClipsWithFilterCompletedEventHandler GetAllClipsWithFilterCompleted;
        
        /// <remarks/>
        public event GetMyClipsCompletedEventHandler GetMyClipsCompleted;
        
        /// <remarks/>
        public event GetClipsCompletedEventHandler GetClipsCompleted;
        
        /// <remarks/>
        public event GetAllMediaWithFilterCompletedEventHandler GetAllMediaWithFilterCompleted;
        
        /// <remarks/>
        public event GetMediaCompletedEventHandler GetMediaCompleted;
        
        /// <remarks/>
        public event FlatViewClipsByDateCompletedEventHandler FlatViewClipsByDateCompleted;
        
        /// <remarks/>
        public event FlatViewByDateCompletedEventHandler FlatViewByDateCompleted;
        
        /// <remarks/>
        public event FlatViewByDate2CompletedEventHandler FlatViewByDate2Completed;
        
        /// <remarks/>
        public event FlatViewByTitleCompletedEventHandler FlatViewByTitleCompleted;
        
        /// <remarks/>
        public event GetSeriesCompletedEventHandler GetSeriesCompleted;
        
        /// <remarks/>
        public event GetSeriesByRangeCompletedEventHandler GetSeriesByRangeCompleted;
        
        /// <remarks/>
        public event GetItemsBySeriesWithFilterCompletedEventHandler GetItemsBySeriesWithFilterCompleted;
        
        /// <remarks/>
        public event GetSeriesWithFilterCompletedEventHandler GetSeriesWithFilterCompleted;
        
        /// <remarks/>
        public event GetItemsByFolderWithFilterCompletedEventHandler GetItemsByFolderWithFilterCompleted;
        
        /// <remarks/>
        public event GetFolderWithFilterCompletedEventHandler GetFolderWithFilterCompleted;
        
        /// <remarks/>
        public event GetItemsBySeriesCompletedEventHandler GetItemsBySeriesCompleted;
        
        /// <remarks/>
        public event GetItemsByFolderCompletedEventHandler GetItemsByFolderCompleted;
        
        /// <remarks/>
        public event GetItemsByJobCompletedEventHandler GetItemsByJobCompleted;
        
        /// <remarks/>
        public event GetMediaByFullNameCompletedEventHandler GetMediaByFullNameCompleted;
        
        /// <remarks/>
        public event GetDriveInformationByNameCompletedEventHandler GetDriveInformationByNameCompleted;
        
        /// <remarks/>
        public event AdvancedSearchCCCompletedEventHandler AdvancedSearchCCCompleted;
        
        /// <remarks/>
        public event AdvancedSearchCCWithSuggestionCompletedEventHandler AdvancedSearchCCWithSuggestionCompleted;
        
        /// <remarks/>
        public event GetOldestUnlockedMediaDateTicksCompletedEventHandler GetOldestUnlockedMediaDateTicksCompleted;
        
        /// <remarks/>
        public event AdvancedSearchCCCountCompletedEventHandler AdvancedSearchCCCountCompleted;
        
        /// <remarks/>
        public event AdvancedSearchCCCountWithSuggestionCompletedEventHandler AdvancedSearchCCCountWithSuggestionCompleted;
        
        /// <remarks/>
        public event LuceneHighlightStringCompletedEventHandler LuceneHighlightStringCompleted;
        
        /// <remarks/>
        public event GetStatsInformationCompletedEventHandler GetStatsInformationCompleted;
        
        /// <remarks/>
        public event GetFolderMediaCountCompletedEventHandler GetFolderMediaCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetFolders", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetFolders(string authTicket, string folderName) {
            object[] results = this.Invoke("GetFolders", new object[] {
                        authTicket,
                        folderName});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string authTicket, string folderName) {
            this.GetFoldersAsync(authTicket, folderName, null);
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string authTicket, string folderName, object userState) {
            if ((this.GetFoldersOperationCompleted == null)) {
                this.GetFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoldersOperationCompleted);
            }
            this.InvokeAsync("GetFolders", new object[] {
                        authTicket,
                        folderName}, this.GetFoldersOperationCompleted, userState);
        }
        
        private void OnGetFoldersOperationCompleted(object arg) {
            if ((this.GetFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoldersCompleted(this, new GetFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetFoldersByRange", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetFoldersByRange(string authTicket, string folderName, int start, int count, out int totalCount) {
            object[] results = this.Invoke("GetFoldersByRange", new object[] {
                        authTicket,
                        folderName,
                        start,
                        count});
            totalCount = ((int)(results[1]));
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFoldersByRangeAsync(string authTicket, string folderName, int start, int count) {
            this.GetFoldersByRangeAsync(authTicket, folderName, start, count, null);
        }
        
        /// <remarks/>
        public void GetFoldersByRangeAsync(string authTicket, string folderName, int start, int count, object userState) {
            if ((this.GetFoldersByRangeOperationCompleted == null)) {
                this.GetFoldersByRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoldersByRangeOperationCompleted);
            }
            this.InvokeAsync("GetFoldersByRange", new object[] {
                        authTicket,
                        folderName,
                        start,
                        count}, this.GetFoldersByRangeOperationCompleted, userState);
        }
        
        private void OnGetFoldersByRangeOperationCompleted(object arg) {
            if ((this.GetFoldersByRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoldersByRangeCompleted(this, new GetFoldersByRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetFolder", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag GetFolder(string authTicket, string folderName) {
            object[] results = this.Invoke("GetFolder", new object[] {
                        authTicket,
                        folderName});
            return ((PVSPropertyBag)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderAsync(string authTicket, string folderName) {
            this.GetFolderAsync(authTicket, folderName, null);
        }
        
        /// <remarks/>
        public void GetFolderAsync(string authTicket, string folderName, object userState) {
            if ((this.GetFolderOperationCompleted == null)) {
                this.GetFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderOperationCompleted);
            }
            this.InvokeAsync("GetFolder", new object[] {
                        authTicket,
                        folderName}, this.GetFolderOperationCompleted, userState);
        }
        
        private void OnGetFolderOperationCompleted(object arg) {
            if ((this.GetFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderCompleted(this, new GetFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetLastChange", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetLastChange(string authTicket) {
            object[] results = this.Invoke("GetLastChange", new object[] {
                        authTicket});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastChangeAsync(string authTicket) {
            this.GetLastChangeAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void GetLastChangeAsync(string authTicket, object userState) {
            if ((this.GetLastChangeOperationCompleted == null)) {
                this.GetLastChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastChangeOperationCompleted);
            }
            this.InvokeAsync("GetLastChange", new object[] {
                        authTicket}, this.GetLastChangeOperationCompleted, userState);
        }
        
        private void OnGetLastChangeOperationCompleted(object arg) {
            if ((this.GetLastChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastChangeCompleted(this, new GetLastChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AddFolder", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddFolder(string authTicket, string sFolder) {
            this.Invoke("AddFolder", new object[] {
                        authTicket,
                        sFolder});
        }
        
        /// <remarks/>
        public void AddFolderAsync(string authTicket, string sFolder) {
            this.AddFolderAsync(authTicket, sFolder, null);
        }
        
        /// <remarks/>
        public void AddFolderAsync(string authTicket, string sFolder, object userState) {
            if ((this.AddFolderOperationCompleted == null)) {
                this.AddFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolderOperationCompleted);
            }
            this.InvokeAsync("AddFolder", new object[] {
                        authTicket,
                        sFolder}, this.AddFolderOperationCompleted, userState);
        }
        
        private void OnAddFolderOperationCompleted(object arg) {
            if ((this.AddFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AddFolder2", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddFolder2(string authTicket, string sFolder, bool bRecurse) {
            this.Invoke("AddFolder2", new object[] {
                        authTicket,
                        sFolder,
                        bRecurse});
        }
        
        /// <remarks/>
        public void AddFolder2Async(string authTicket, string sFolder, bool bRecurse) {
            this.AddFolder2Async(authTicket, sFolder, bRecurse, null);
        }
        
        /// <remarks/>
        public void AddFolder2Async(string authTicket, string sFolder, bool bRecurse, object userState) {
            if ((this.AddFolder2OperationCompleted == null)) {
                this.AddFolder2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolder2OperationCompleted);
            }
            this.InvokeAsync("AddFolder2", new object[] {
                        authTicket,
                        sFolder,
                        bRecurse}, this.AddFolder2OperationCompleted, userState);
        }
        
        private void OnAddFolder2OperationCompleted(object arg) {
            if ((this.AddFolder2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolder2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AddFolder3", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddFolder3(string authTicket, string sFolder, bool bRecurse, bool bManaged) {
            this.Invoke("AddFolder3", new object[] {
                        authTicket,
                        sFolder,
                        bRecurse,
                        bManaged});
        }
        
        /// <remarks/>
        public void AddFolder3Async(string authTicket, string sFolder, bool bRecurse, bool bManaged) {
            this.AddFolder3Async(authTicket, sFolder, bRecurse, bManaged, null);
        }
        
        /// <remarks/>
        public void AddFolder3Async(string authTicket, string sFolder, bool bRecurse, bool bManaged, object userState) {
            if ((this.AddFolder3OperationCompleted == null)) {
                this.AddFolder3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolder3OperationCompleted);
            }
            this.InvokeAsync("AddFolder3", new object[] {
                        authTicket,
                        sFolder,
                        bRecurse,
                        bManaged}, this.AddFolder3OperationCompleted, userState);
        }
        
        private void OnAddFolder3OperationCompleted(object arg) {
            if ((this.AddFolder3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFolder3Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/RemoveFolder", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveFolder(string authTicket, string sFolder) {
            this.Invoke("RemoveFolder", new object[] {
                        authTicket,
                        sFolder});
        }
        
        /// <remarks/>
        public void RemoveFolderAsync(string authTicket, string sFolder) {
            this.RemoveFolderAsync(authTicket, sFolder, null);
        }
        
        /// <remarks/>
        public void RemoveFolderAsync(string authTicket, string sFolder, object userState) {
            if ((this.RemoveFolderOperationCompleted == null)) {
                this.RemoveFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFolderOperationCompleted);
            }
            this.InvokeAsync("RemoveFolder", new object[] {
                        authTicket,
                        sFolder}, this.RemoveFolderOperationCompleted, userState);
        }
        
        private void OnRemoveFolderOperationCompleted(object arg) {
            if ((this.RemoveFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/EditMedia", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditMedia(string authTicket, string fullName, PVSPropertyBag bag) {
            this.Invoke("EditMedia", new object[] {
                        authTicket,
                        fullName,
                        bag});
        }
        
        /// <remarks/>
        public void EditMediaAsync(string authTicket, string fullName, PVSPropertyBag bag) {
            this.EditMediaAsync(authTicket, fullName, bag, null);
        }
        
        /// <remarks/>
        public void EditMediaAsync(string authTicket, string fullName, PVSPropertyBag bag, object userState) {
            if ((this.EditMediaOperationCompleted == null)) {
                this.EditMediaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditMediaOperationCompleted);
            }
            this.InvokeAsync("EditMedia", new object[] {
                        authTicket,
                        fullName,
                        bag}, this.EditMediaOperationCompleted, userState);
        }
        
        private void OnEditMediaOperationCompleted(object arg) {
            if ((this.EditMediaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditMediaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/SetUserSpecificProperty", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserSpecificProperty(string authTicket, string fullName, string property, string value) {
            this.Invoke("SetUserSpecificProperty", new object[] {
                        authTicket,
                        fullName,
                        property,
                        value});
        }
        
        /// <remarks/>
        public void SetUserSpecificPropertyAsync(string authTicket, string fullName, string property, string value) {
            this.SetUserSpecificPropertyAsync(authTicket, fullName, property, value, null);
        }
        
        /// <remarks/>
        public void SetUserSpecificPropertyAsync(string authTicket, string fullName, string property, string value, object userState) {
            if ((this.SetUserSpecificPropertyOperationCompleted == null)) {
                this.SetUserSpecificPropertyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserSpecificPropertyOperationCompleted);
            }
            this.InvokeAsync("SetUserSpecificProperty", new object[] {
                        authTicket,
                        fullName,
                        property,
                        value}, this.SetUserSpecificPropertyOperationCompleted, userState);
        }
        
        private void OnSetUserSpecificPropertyOperationCompleted(object arg) {
            if ((this.SetUserSpecificPropertyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserSpecificPropertyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/DeleteMedia", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMedia(string authTicket, string fullName) {
            this.Invoke("DeleteMedia", new object[] {
                        authTicket,
                        fullName});
        }
        
        /// <remarks/>
        public void DeleteMediaAsync(string authTicket, string fullName) {
            this.DeleteMediaAsync(authTicket, fullName, null);
        }
        
        /// <remarks/>
        public void DeleteMediaAsync(string authTicket, string fullName, object userState) {
            if ((this.DeleteMediaOperationCompleted == null)) {
                this.DeleteMediaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMediaOperationCompleted);
            }
            this.InvokeAsync("DeleteMedia", new object[] {
                        authTicket,
                        fullName}, this.DeleteMediaOperationCompleted, userState);
        }
        
        private void OnDeleteMediaOperationCompleted(object arg) {
            if ((this.DeleteMediaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMediaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetAllClipsWithFilter", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetAllClipsWithFilter(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order) {
            object[] results = this.Invoke("GetAllClipsWithFilter", new object[] {
                        authTicket,
                        hide,
                        sort,
                        order});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllClipsWithFilterAsync(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order) {
            this.GetAllClipsWithFilterAsync(authTicket, hide, sort, order, null);
        }
        
        /// <remarks/>
        public void GetAllClipsWithFilterAsync(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, object userState) {
            if ((this.GetAllClipsWithFilterOperationCompleted == null)) {
                this.GetAllClipsWithFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllClipsWithFilterOperationCompleted);
            }
            this.InvokeAsync("GetAllClipsWithFilter", new object[] {
                        authTicket,
                        hide,
                        sort,
                        order}, this.GetAllClipsWithFilterOperationCompleted, userState);
        }
        
        private void OnGetAllClipsWithFilterOperationCompleted(object arg) {
            if ((this.GetAllClipsWithFilterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllClipsWithFilterCompleted(this, new GetAllClipsWithFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetMyClips", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetMyClips(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count, out int totalCount) {
            object[] results = this.Invoke("GetMyClips", new object[] {
                        authTicket,
                        hide,
                        sort,
                        order,
                        start,
                        count});
            totalCount = ((int)(results[1]));
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMyClipsAsync(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count) {
            this.GetMyClipsAsync(authTicket, hide, sort, order, start, count, null);
        }
        
        /// <remarks/>
        public void GetMyClipsAsync(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count, object userState) {
            if ((this.GetMyClipsOperationCompleted == null)) {
                this.GetMyClipsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyClipsOperationCompleted);
            }
            this.InvokeAsync("GetMyClips", new object[] {
                        authTicket,
                        hide,
                        sort,
                        order,
                        start,
                        count}, this.GetMyClipsOperationCompleted, userState);
        }
        
        private void OnGetMyClipsOperationCompleted(object arg) {
            if ((this.GetMyClipsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyClipsCompleted(this, new GetMyClipsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetClips", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetClips(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count, out int totalCount) {
            object[] results = this.Invoke("GetClips", new object[] {
                        authTicket,
                        hide,
                        sort,
                        order,
                        start,
                        count});
            totalCount = ((int)(results[1]));
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetClipsAsync(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count) {
            this.GetClipsAsync(authTicket, hide, sort, order, start, count, null);
        }
        
        /// <remarks/>
        public void GetClipsAsync(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count, object userState) {
            if ((this.GetClipsOperationCompleted == null)) {
                this.GetClipsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClipsOperationCompleted);
            }
            this.InvokeAsync("GetClips", new object[] {
                        authTicket,
                        hide,
                        sort,
                        order,
                        start,
                        count}, this.GetClipsOperationCompleted, userState);
        }
        
        private void OnGetClipsOperationCompleted(object arg) {
            if ((this.GetClipsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClipsCompleted(this, new GetClipsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetAllMediaWithFilter", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetAllMediaWithFilter(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order) {
            object[] results = this.Invoke("GetAllMediaWithFilter", new object[] {
                        authTicket,
                        hide,
                        sort,
                        order});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllMediaWithFilterAsync(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order) {
            this.GetAllMediaWithFilterAsync(authTicket, hide, sort, order, null);
        }
        
        /// <remarks/>
        public void GetAllMediaWithFilterAsync(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, object userState) {
            if ((this.GetAllMediaWithFilterOperationCompleted == null)) {
                this.GetAllMediaWithFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMediaWithFilterOperationCompleted);
            }
            this.InvokeAsync("GetAllMediaWithFilter", new object[] {
                        authTicket,
                        hide,
                        sort,
                        order}, this.GetAllMediaWithFilterOperationCompleted, userState);
        }
        
        private void OnGetAllMediaWithFilterOperationCompleted(object arg) {
            if ((this.GetAllMediaWithFilterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMediaWithFilterCompleted(this, new GetAllMediaWithFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetMedia", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetMedia(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count, out int totalCount) {
            object[] results = this.Invoke("GetMedia", new object[] {
                        authTicket,
                        hide,
                        sort,
                        order,
                        start,
                        count});
            totalCount = ((int)(results[1]));
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMediaAsync(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count) {
            this.GetMediaAsync(authTicket, hide, sort, order, start, count, null);
        }
        
        /// <remarks/>
        public void GetMediaAsync(string authTicket, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count, object userState) {
            if ((this.GetMediaOperationCompleted == null)) {
                this.GetMediaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMediaOperationCompleted);
            }
            this.InvokeAsync("GetMedia", new object[] {
                        authTicket,
                        hide,
                        sort,
                        order,
                        start,
                        count}, this.GetMediaOperationCompleted, userState);
        }
        
        private void OnGetMediaOperationCompleted(object arg) {
            if ((this.GetMediaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMediaCompleted(this, new GetMediaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/FlatViewClipsByDate", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] FlatViewClipsByDate(string authTicket) {
            object[] results = this.Invoke("FlatViewClipsByDate", new object[] {
                        authTicket});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void FlatViewClipsByDateAsync(string authTicket) {
            this.FlatViewClipsByDateAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void FlatViewClipsByDateAsync(string authTicket, object userState) {
            if ((this.FlatViewClipsByDateOperationCompleted == null)) {
                this.FlatViewClipsByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlatViewClipsByDateOperationCompleted);
            }
            this.InvokeAsync("FlatViewClipsByDate", new object[] {
                        authTicket}, this.FlatViewClipsByDateOperationCompleted, userState);
        }
        
        private void OnFlatViewClipsByDateOperationCompleted(object arg) {
            if ((this.FlatViewClipsByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FlatViewClipsByDateCompleted(this, new FlatViewClipsByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/FlatViewByDate", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] FlatViewByDate(string authTicket) {
            object[] results = this.Invoke("FlatViewByDate", new object[] {
                        authTicket});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void FlatViewByDateAsync(string authTicket) {
            this.FlatViewByDateAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void FlatViewByDateAsync(string authTicket, object userState) {
            if ((this.FlatViewByDateOperationCompleted == null)) {
                this.FlatViewByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlatViewByDateOperationCompleted);
            }
            this.InvokeAsync("FlatViewByDate", new object[] {
                        authTicket}, this.FlatViewByDateOperationCompleted, userState);
        }
        
        private void OnFlatViewByDateOperationCompleted(object arg) {
            if ((this.FlatViewByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FlatViewByDateCompleted(this, new FlatViewByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/FlatViewByDate2", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] FlatViewByDate2(string authTicket, int index, int count) {
            object[] results = this.Invoke("FlatViewByDate2", new object[] {
                        authTicket,
                        index,
                        count});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void FlatViewByDate2Async(string authTicket, int index, int count) {
            this.FlatViewByDate2Async(authTicket, index, count, null);
        }
        
        /// <remarks/>
        public void FlatViewByDate2Async(string authTicket, int index, int count, object userState) {
            if ((this.FlatViewByDate2OperationCompleted == null)) {
                this.FlatViewByDate2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlatViewByDate2OperationCompleted);
            }
            this.InvokeAsync("FlatViewByDate2", new object[] {
                        authTicket,
                        index,
                        count}, this.FlatViewByDate2OperationCompleted, userState);
        }
        
        private void OnFlatViewByDate2OperationCompleted(object arg) {
            if ((this.FlatViewByDate2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FlatViewByDate2Completed(this, new FlatViewByDate2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/FlatViewByTitle", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] FlatViewByTitle(string authTicket) {
            object[] results = this.Invoke("FlatViewByTitle", new object[] {
                        authTicket});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void FlatViewByTitleAsync(string authTicket) {
            this.FlatViewByTitleAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void FlatViewByTitleAsync(string authTicket, object userState) {
            if ((this.FlatViewByTitleOperationCompleted == null)) {
                this.FlatViewByTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlatViewByTitleOperationCompleted);
            }
            this.InvokeAsync("FlatViewByTitle", new object[] {
                        authTicket}, this.FlatViewByTitleOperationCompleted, userState);
        }
        
        private void OnFlatViewByTitleOperationCompleted(object arg) {
            if ((this.FlatViewByTitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FlatViewByTitleCompleted(this, new FlatViewByTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetSeries", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetSeries(string authTicket) {
            object[] results = this.Invoke("GetSeries", new object[] {
                        authTicket});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSeriesAsync(string authTicket) {
            this.GetSeriesAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void GetSeriesAsync(string authTicket, object userState) {
            if ((this.GetSeriesOperationCompleted == null)) {
                this.GetSeriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeriesOperationCompleted);
            }
            this.InvokeAsync("GetSeries", new object[] {
                        authTicket}, this.GetSeriesOperationCompleted, userState);
        }
        
        private void OnGetSeriesOperationCompleted(object arg) {
            if ((this.GetSeriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSeriesCompleted(this, new GetSeriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetSeriesByRange", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetSeriesByRange(string authTicket, int start, int count, out int totalCount) {
            object[] results = this.Invoke("GetSeriesByRange", new object[] {
                        authTicket,
                        start,
                        count});
            totalCount = ((int)(results[1]));
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSeriesByRangeAsync(string authTicket, int start, int count) {
            this.GetSeriesByRangeAsync(authTicket, start, count, null);
        }
        
        /// <remarks/>
        public void GetSeriesByRangeAsync(string authTicket, int start, int count, object userState) {
            if ((this.GetSeriesByRangeOperationCompleted == null)) {
                this.GetSeriesByRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeriesByRangeOperationCompleted);
            }
            this.InvokeAsync("GetSeriesByRange", new object[] {
                        authTicket,
                        start,
                        count}, this.GetSeriesByRangeOperationCompleted, userState);
        }
        
        private void OnGetSeriesByRangeOperationCompleted(object arg) {
            if ((this.GetSeriesByRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSeriesByRangeCompleted(this, new GetSeriesByRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetItemsBySeriesWithFilter", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetItemsBySeriesWithFilter(string authTicket, string series, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order) {
            object[] results = this.Invoke("GetItemsBySeriesWithFilter", new object[] {
                        authTicket,
                        series,
                        hide,
                        sort,
                        order});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetItemsBySeriesWithFilterAsync(string authTicket, string series, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order) {
            this.GetItemsBySeriesWithFilterAsync(authTicket, series, hide, sort, order, null);
        }
        
        /// <remarks/>
        public void GetItemsBySeriesWithFilterAsync(string authTicket, string series, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, object userState) {
            if ((this.GetItemsBySeriesWithFilterOperationCompleted == null)) {
                this.GetItemsBySeriesWithFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemsBySeriesWithFilterOperationCompleted);
            }
            this.InvokeAsync("GetItemsBySeriesWithFilter", new object[] {
                        authTicket,
                        series,
                        hide,
                        sort,
                        order}, this.GetItemsBySeriesWithFilterOperationCompleted, userState);
        }
        
        private void OnGetItemsBySeriesWithFilterOperationCompleted(object arg) {
            if ((this.GetItemsBySeriesWithFilterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemsBySeriesWithFilterCompleted(this, new GetItemsBySeriesWithFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetSeriesWithFilter", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetSeriesWithFilter(string authTicket, string series, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count, out int totalCount) {
            object[] results = this.Invoke("GetSeriesWithFilter", new object[] {
                        authTicket,
                        series,
                        hide,
                        sort,
                        order,
                        start,
                        count});
            totalCount = ((int)(results[1]));
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSeriesWithFilterAsync(string authTicket, string series, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count) {
            this.GetSeriesWithFilterAsync(authTicket, series, hide, sort, order, start, count, null);
        }
        
        /// <remarks/>
        public void GetSeriesWithFilterAsync(string authTicket, string series, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count, object userState) {
            if ((this.GetSeriesWithFilterOperationCompleted == null)) {
                this.GetSeriesWithFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeriesWithFilterOperationCompleted);
            }
            this.InvokeAsync("GetSeriesWithFilter", new object[] {
                        authTicket,
                        series,
                        hide,
                        sort,
                        order,
                        start,
                        count}, this.GetSeriesWithFilterOperationCompleted, userState);
        }
        
        private void OnGetSeriesWithFilterOperationCompleted(object arg) {
            if ((this.GetSeriesWithFilterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSeriesWithFilterCompleted(this, new GetSeriesWithFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetItemsByFolderWithFilter", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetItemsByFolderWithFilter(string authTicket, string folder, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order) {
            object[] results = this.Invoke("GetItemsByFolderWithFilter", new object[] {
                        authTicket,
                        folder,
                        hide,
                        sort,
                        order});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetItemsByFolderWithFilterAsync(string authTicket, string folder, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order) {
            this.GetItemsByFolderWithFilterAsync(authTicket, folder, hide, sort, order, null);
        }
        
        /// <remarks/>
        public void GetItemsByFolderWithFilterAsync(string authTicket, string folder, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, object userState) {
            if ((this.GetItemsByFolderWithFilterOperationCompleted == null)) {
                this.GetItemsByFolderWithFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemsByFolderWithFilterOperationCompleted);
            }
            this.InvokeAsync("GetItemsByFolderWithFilter", new object[] {
                        authTicket,
                        folder,
                        hide,
                        sort,
                        order}, this.GetItemsByFolderWithFilterOperationCompleted, userState);
        }
        
        private void OnGetItemsByFolderWithFilterOperationCompleted(object arg) {
            if ((this.GetItemsByFolderWithFilterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemsByFolderWithFilterCompleted(this, new GetItemsByFolderWithFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetFolderWithFilter", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetFolderWithFilter(string authTicket, string folder, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count, out int totalCount) {
            object[] results = this.Invoke("GetFolderWithFilter", new object[] {
                        authTicket,
                        folder,
                        hide,
                        sort,
                        order,
                        start,
                        count});
            totalCount = ((int)(results[1]));
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderWithFilterAsync(string authTicket, string folder, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count) {
            this.GetFolderWithFilterAsync(authTicket, folder, hide, sort, order, start, count, null);
        }
        
        /// <remarks/>
        public void GetFolderWithFilterAsync(string authTicket, string folder, LibraryHideOption hide, LibrarySort sort, LibrarySortOrder order, int start, int count, object userState) {
            if ((this.GetFolderWithFilterOperationCompleted == null)) {
                this.GetFolderWithFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderWithFilterOperationCompleted);
            }
            this.InvokeAsync("GetFolderWithFilter", new object[] {
                        authTicket,
                        folder,
                        hide,
                        sort,
                        order,
                        start,
                        count}, this.GetFolderWithFilterOperationCompleted, userState);
        }
        
        private void OnGetFolderWithFilterOperationCompleted(object arg) {
            if ((this.GetFolderWithFilterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderWithFilterCompleted(this, new GetFolderWithFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetItemsBySeries", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetItemsBySeries(string authTicket, string series) {
            object[] results = this.Invoke("GetItemsBySeries", new object[] {
                        authTicket,
                        series});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetItemsBySeriesAsync(string authTicket, string series) {
            this.GetItemsBySeriesAsync(authTicket, series, null);
        }
        
        /// <remarks/>
        public void GetItemsBySeriesAsync(string authTicket, string series, object userState) {
            if ((this.GetItemsBySeriesOperationCompleted == null)) {
                this.GetItemsBySeriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemsBySeriesOperationCompleted);
            }
            this.InvokeAsync("GetItemsBySeries", new object[] {
                        authTicket,
                        series}, this.GetItemsBySeriesOperationCompleted, userState);
        }
        
        private void OnGetItemsBySeriesOperationCompleted(object arg) {
            if ((this.GetItemsBySeriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemsBySeriesCompleted(this, new GetItemsBySeriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetItemsByFolder", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetItemsByFolder(string authTicket, string folder) {
            object[] results = this.Invoke("GetItemsByFolder", new object[] {
                        authTicket,
                        folder});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetItemsByFolderAsync(string authTicket, string folder) {
            this.GetItemsByFolderAsync(authTicket, folder, null);
        }
        
        /// <remarks/>
        public void GetItemsByFolderAsync(string authTicket, string folder, object userState) {
            if ((this.GetItemsByFolderOperationCompleted == null)) {
                this.GetItemsByFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemsByFolderOperationCompleted);
            }
            this.InvokeAsync("GetItemsByFolder", new object[] {
                        authTicket,
                        folder}, this.GetItemsByFolderOperationCompleted, userState);
        }
        
        private void OnGetItemsByFolderOperationCompleted(object arg) {
            if ((this.GetItemsByFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemsByFolderCompleted(this, new GetItemsByFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetItemsByJob", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetItemsByJob(string authTicket, System.Guid job) {
            object[] results = this.Invoke("GetItemsByJob", new object[] {
                        authTicket,
                        job});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetItemsByJobAsync(string authTicket, System.Guid job) {
            this.GetItemsByJobAsync(authTicket, job, null);
        }
        
        /// <remarks/>
        public void GetItemsByJobAsync(string authTicket, System.Guid job, object userState) {
            if ((this.GetItemsByJobOperationCompleted == null)) {
                this.GetItemsByJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemsByJobOperationCompleted);
            }
            this.InvokeAsync("GetItemsByJob", new object[] {
                        authTicket,
                        job}, this.GetItemsByJobOperationCompleted, userState);
        }
        
        private void OnGetItemsByJobOperationCompleted(object arg) {
            if ((this.GetItemsByJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemsByJobCompleted(this, new GetItemsByJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetMediaByFullName", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag GetMediaByFullName(string authTicket, string fullName) {
            object[] results = this.Invoke("GetMediaByFullName", new object[] {
                        authTicket,
                        fullName});
            return ((PVSPropertyBag)(results[0]));
        }
        
        /// <remarks/>
        public void GetMediaByFullNameAsync(string authTicket, string fullName) {
            this.GetMediaByFullNameAsync(authTicket, fullName, null);
        }
        
        /// <remarks/>
        public void GetMediaByFullNameAsync(string authTicket, string fullName, object userState) {
            if ((this.GetMediaByFullNameOperationCompleted == null)) {
                this.GetMediaByFullNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMediaByFullNameOperationCompleted);
            }
            this.InvokeAsync("GetMediaByFullName", new object[] {
                        authTicket,
                        fullName}, this.GetMediaByFullNameOperationCompleted, userState);
        }
        
        private void OnGetMediaByFullNameOperationCompleted(object arg) {
            if ((this.GetMediaByFullNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMediaByFullNameCompleted(this, new GetMediaByFullNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetDriveInformationByName", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag GetDriveInformationByName(string authTicket, string driveName) {
            object[] results = this.Invoke("GetDriveInformationByName", new object[] {
                        authTicket,
                        driveName});
            return ((PVSPropertyBag)(results[0]));
        }
        
        /// <remarks/>
        public void GetDriveInformationByNameAsync(string authTicket, string driveName) {
            this.GetDriveInformationByNameAsync(authTicket, driveName, null);
        }
        
        /// <remarks/>
        public void GetDriveInformationByNameAsync(string authTicket, string driveName, object userState) {
            if ((this.GetDriveInformationByNameOperationCompleted == null)) {
                this.GetDriveInformationByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDriveInformationByNameOperationCompleted);
            }
            this.InvokeAsync("GetDriveInformationByName", new object[] {
                        authTicket,
                        driveName}, this.GetDriveInformationByNameOperationCompleted, userState);
        }
        
        private void OnGetDriveInformationByNameOperationCompleted(object arg) {
            if ((this.GetDriveInformationByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDriveInformationByNameCompleted(this, new GetDriveInformationByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AdvancedSearchCC", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] AdvancedSearchCC(string authTicket, string search, int pageNumber, int resultsPerPage, bool titleSearch, bool descSearch, bool ccSearch, string highlightStart, string highlightEnd, out int numberOfPages, out int numberOfResults) {
            object[] results = this.Invoke("AdvancedSearchCC", new object[] {
                        authTicket,
                        search,
                        pageNumber,
                        resultsPerPage,
                        titleSearch,
                        descSearch,
                        ccSearch,
                        highlightStart,
                        highlightEnd});
            numberOfPages = ((int)(results[1]));
            numberOfResults = ((int)(results[2]));
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void AdvancedSearchCCAsync(string authTicket, string search, int pageNumber, int resultsPerPage, bool titleSearch, bool descSearch, bool ccSearch, string highlightStart, string highlightEnd) {
            this.AdvancedSearchCCAsync(authTicket, search, pageNumber, resultsPerPage, titleSearch, descSearch, ccSearch, highlightStart, highlightEnd, null);
        }
        
        /// <remarks/>
        public void AdvancedSearchCCAsync(string authTicket, string search, int pageNumber, int resultsPerPage, bool titleSearch, bool descSearch, bool ccSearch, string highlightStart, string highlightEnd, object userState) {
            if ((this.AdvancedSearchCCOperationCompleted == null)) {
                this.AdvancedSearchCCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdvancedSearchCCOperationCompleted);
            }
            this.InvokeAsync("AdvancedSearchCC", new object[] {
                        authTicket,
                        search,
                        pageNumber,
                        resultsPerPage,
                        titleSearch,
                        descSearch,
                        ccSearch,
                        highlightStart,
                        highlightEnd}, this.AdvancedSearchCCOperationCompleted, userState);
        }
        
        private void OnAdvancedSearchCCOperationCompleted(object arg) {
            if ((this.AdvancedSearchCCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdvancedSearchCCCompleted(this, new AdvancedSearchCCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AdvancedSearchCCWithSuggestion", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] AdvancedSearchCCWithSuggestion(string authTicket, string search, int pageNumber, int resultsPerPage, bool titleSearch, bool descSearch, bool ccSearch, string highlightStart, string highlightEnd, string suggestionStart, string suggestionEnd, out int numberOfPages, out int numberOfResults, out string suggestion, out string suggestionFormatted) {
            object[] results = this.Invoke("AdvancedSearchCCWithSuggestion", new object[] {
                        authTicket,
                        search,
                        pageNumber,
                        resultsPerPage,
                        titleSearch,
                        descSearch,
                        ccSearch,
                        highlightStart,
                        highlightEnd,
                        suggestionStart,
                        suggestionEnd});
            numberOfPages = ((int)(results[1]));
            numberOfResults = ((int)(results[2]));
            suggestion = ((string)(results[3]));
            suggestionFormatted = ((string)(results[4]));
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void AdvancedSearchCCWithSuggestionAsync(string authTicket, string search, int pageNumber, int resultsPerPage, bool titleSearch, bool descSearch, bool ccSearch, string highlightStart, string highlightEnd, string suggestionStart, string suggestionEnd) {
            this.AdvancedSearchCCWithSuggestionAsync(authTicket, search, pageNumber, resultsPerPage, titleSearch, descSearch, ccSearch, highlightStart, highlightEnd, suggestionStart, suggestionEnd, null);
        }
        
        /// <remarks/>
        public void AdvancedSearchCCWithSuggestionAsync(string authTicket, string search, int pageNumber, int resultsPerPage, bool titleSearch, bool descSearch, bool ccSearch, string highlightStart, string highlightEnd, string suggestionStart, string suggestionEnd, object userState) {
            if ((this.AdvancedSearchCCWithSuggestionOperationCompleted == null)) {
                this.AdvancedSearchCCWithSuggestionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdvancedSearchCCWithSuggestionOperationCompleted);
            }
            this.InvokeAsync("AdvancedSearchCCWithSuggestion", new object[] {
                        authTicket,
                        search,
                        pageNumber,
                        resultsPerPage,
                        titleSearch,
                        descSearch,
                        ccSearch,
                        highlightStart,
                        highlightEnd,
                        suggestionStart,
                        suggestionEnd}, this.AdvancedSearchCCWithSuggestionOperationCompleted, userState);
        }
        
        private void OnAdvancedSearchCCWithSuggestionOperationCompleted(object arg) {
            if ((this.AdvancedSearchCCWithSuggestionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdvancedSearchCCWithSuggestionCompleted(this, new AdvancedSearchCCWithSuggestionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetOldestUnlockedMediaDateTicks", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetOldestUnlockedMediaDateTicks(string authTicket) {
            object[] results = this.Invoke("GetOldestUnlockedMediaDateTicks", new object[] {
                        authTicket});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetOldestUnlockedMediaDateTicksAsync(string authTicket) {
            this.GetOldestUnlockedMediaDateTicksAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void GetOldestUnlockedMediaDateTicksAsync(string authTicket, object userState) {
            if ((this.GetOldestUnlockedMediaDateTicksOperationCompleted == null)) {
                this.GetOldestUnlockedMediaDateTicksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOldestUnlockedMediaDateTicksOperationCompleted);
            }
            this.InvokeAsync("GetOldestUnlockedMediaDateTicks", new object[] {
                        authTicket}, this.GetOldestUnlockedMediaDateTicksOperationCompleted, userState);
        }
        
        private void OnGetOldestUnlockedMediaDateTicksOperationCompleted(object arg) {
            if ((this.GetOldestUnlockedMediaDateTicksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOldestUnlockedMediaDateTicksCompleted(this, new GetOldestUnlockedMediaDateTicksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AdvancedSearchCCCount", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AdvancedSearchCCCount(string authTicket, string search, bool titleSearch, bool descSearch, bool ccSearch) {
            object[] results = this.Invoke("AdvancedSearchCCCount", new object[] {
                        authTicket,
                        search,
                        titleSearch,
                        descSearch,
                        ccSearch});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AdvancedSearchCCCountAsync(string authTicket, string search, bool titleSearch, bool descSearch, bool ccSearch) {
            this.AdvancedSearchCCCountAsync(authTicket, search, titleSearch, descSearch, ccSearch, null);
        }
        
        /// <remarks/>
        public void AdvancedSearchCCCountAsync(string authTicket, string search, bool titleSearch, bool descSearch, bool ccSearch, object userState) {
            if ((this.AdvancedSearchCCCountOperationCompleted == null)) {
                this.AdvancedSearchCCCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdvancedSearchCCCountOperationCompleted);
            }
            this.InvokeAsync("AdvancedSearchCCCount", new object[] {
                        authTicket,
                        search,
                        titleSearch,
                        descSearch,
                        ccSearch}, this.AdvancedSearchCCCountOperationCompleted, userState);
        }
        
        private void OnAdvancedSearchCCCountOperationCompleted(object arg) {
            if ((this.AdvancedSearchCCCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdvancedSearchCCCountCompleted(this, new AdvancedSearchCCCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AdvancedSearchCCCountWithSuggestion", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AdvancedSearchCCCountWithSuggestion(string authTicket, string search, bool titleSearch, bool descSearch, bool ccSearch, string suggestionStart, string suggestionEnd, out string suggestion, out string suggestionFormatted) {
            object[] results = this.Invoke("AdvancedSearchCCCountWithSuggestion", new object[] {
                        authTicket,
                        search,
                        titleSearch,
                        descSearch,
                        ccSearch,
                        suggestionStart,
                        suggestionEnd});
            suggestion = ((string)(results[1]));
            suggestionFormatted = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AdvancedSearchCCCountWithSuggestionAsync(string authTicket, string search, bool titleSearch, bool descSearch, bool ccSearch, string suggestionStart, string suggestionEnd) {
            this.AdvancedSearchCCCountWithSuggestionAsync(authTicket, search, titleSearch, descSearch, ccSearch, suggestionStart, suggestionEnd, null);
        }
        
        /// <remarks/>
        public void AdvancedSearchCCCountWithSuggestionAsync(string authTicket, string search, bool titleSearch, bool descSearch, bool ccSearch, string suggestionStart, string suggestionEnd, object userState) {
            if ((this.AdvancedSearchCCCountWithSuggestionOperationCompleted == null)) {
                this.AdvancedSearchCCCountWithSuggestionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdvancedSearchCCCountWithSuggestionOperationCompleted);
            }
            this.InvokeAsync("AdvancedSearchCCCountWithSuggestion", new object[] {
                        authTicket,
                        search,
                        titleSearch,
                        descSearch,
                        ccSearch,
                        suggestionStart,
                        suggestionEnd}, this.AdvancedSearchCCCountWithSuggestionOperationCompleted, userState);
        }
        
        private void OnAdvancedSearchCCCountWithSuggestionOperationCompleted(object arg) {
            if ((this.AdvancedSearchCCCountWithSuggestionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdvancedSearchCCCountWithSuggestionCompleted(this, new AdvancedSearchCCCountWithSuggestionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/LuceneHighlightString", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LuceneHighlightString(string authTicket, string inputString, string query, string highlightStart, string highlightEnd) {
            object[] results = this.Invoke("LuceneHighlightString", new object[] {
                        authTicket,
                        inputString,
                        query,
                        highlightStart,
                        highlightEnd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LuceneHighlightStringAsync(string authTicket, string inputString, string query, string highlightStart, string highlightEnd) {
            this.LuceneHighlightStringAsync(authTicket, inputString, query, highlightStart, highlightEnd, null);
        }
        
        /// <remarks/>
        public void LuceneHighlightStringAsync(string authTicket, string inputString, string query, string highlightStart, string highlightEnd, object userState) {
            if ((this.LuceneHighlightStringOperationCompleted == null)) {
                this.LuceneHighlightStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLuceneHighlightStringOperationCompleted);
            }
            this.InvokeAsync("LuceneHighlightString", new object[] {
                        authTicket,
                        inputString,
                        query,
                        highlightStart,
                        highlightEnd}, this.LuceneHighlightStringOperationCompleted, userState);
        }
        
        private void OnLuceneHighlightStringOperationCompleted(object arg) {
            if ((this.LuceneHighlightStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LuceneHighlightStringCompleted(this, new LuceneHighlightStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetStatsInformation", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag[] GetStatsInformation(string authTicket) {
            object[] results = this.Invoke("GetStatsInformation", new object[] {
                        authTicket});
            return ((PVSPropertyBag[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStatsInformationAsync(string authTicket) {
            this.GetStatsInformationAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void GetStatsInformationAsync(string authTicket, object userState) {
            if ((this.GetStatsInformationOperationCompleted == null)) {
                this.GetStatsInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatsInformationOperationCompleted);
            }
            this.InvokeAsync("GetStatsInformation", new object[] {
                        authTicket}, this.GetStatsInformationOperationCompleted, userState);
        }
        
        private void OnGetStatsInformationOperationCompleted(object arg) {
            if ((this.GetStatsInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatsInformationCompleted(this, new GetStatsInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetFolderMediaCount", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetFolderMediaCount(string authTicket, string folderName) {
            object[] results = this.Invoke("GetFolderMediaCount", new object[] {
                        authTicket,
                        folderName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderMediaCountAsync(string authTicket, string folderName) {
            this.GetFolderMediaCountAsync(authTicket, folderName, null);
        }
        
        /// <remarks/>
        public void GetFolderMediaCountAsync(string authTicket, string folderName, object userState) {
            if ((this.GetFolderMediaCountOperationCompleted == null)) {
                this.GetFolderMediaCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderMediaCountOperationCompleted);
            }
            this.InvokeAsync("GetFolderMediaCount", new object[] {
                        authTicket,
                        folderName}, this.GetFolderMediaCountOperationCompleted, userState);
        }
        
        private void OnGetFolderMediaCountOperationCompleted(object arg) {
            if ((this.GetFolderMediaCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderMediaCountCompleted(this, new GetFolderMediaCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.snapstream.com/types")]
    public partial class PVSPropertyBag {
        
        private PVSProperty[] propertiesField;
        
        /// <remarks/>
        public PVSProperty[] Properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.snapstream.com/types")]
    public partial class PVSProperty {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.snapstream.com/WebService")]
    public enum LibraryHideOption {
        
        /// <remarks/>
        ReplaceShowSqueezed,
        
        /// <remarks/>
        ReplaceOriginals,
        
        /// <remarks/>
        Originals,
        
        /// <remarks/>
        ShowSqueezed,
        
        /// <remarks/>
        None,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.snapstream.com/WebService")]
    public enum LibrarySort {
        
        /// <remarks/>
        Duration,
        
        /// <remarks/>
        FileName,
        
        /// <remarks/>
        Name,
        
        /// <remarks/>
        OriginalAirDate,
        
        /// <remarks/>
        DateRecorded,
        
        /// <remarks/>
        FileType,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.snapstream.com/WebService")]
    public enum LibrarySortOrder {
        
        /// <remarks/>
        Descending,
        
        /// <remarks/>
        Ascending,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetFoldersCompletedEventHandler(object sender, GetFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetFoldersByRangeCompletedEventHandler(object sender, GetFoldersByRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoldersByRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFoldersByRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetFolderCompletedEventHandler(object sender, GetFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLastChangeCompletedEventHandler(object sender, GetLastChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AddFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AddFolder2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AddFolder3CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void RemoveFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void EditMediaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetUserSpecificPropertyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DeleteMediaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetAllClipsWithFilterCompletedEventHandler(object sender, GetAllClipsWithFilterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllClipsWithFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllClipsWithFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetMyClipsCompletedEventHandler(object sender, GetMyClipsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyClipsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyClipsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetClipsCompletedEventHandler(object sender, GetClipsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClipsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClipsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetAllMediaWithFilterCompletedEventHandler(object sender, GetAllMediaWithFilterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMediaWithFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMediaWithFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetMediaCompletedEventHandler(object sender, GetMediaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMediaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMediaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void FlatViewClipsByDateCompletedEventHandler(object sender, FlatViewClipsByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FlatViewClipsByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FlatViewClipsByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void FlatViewByDateCompletedEventHandler(object sender, FlatViewByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FlatViewByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FlatViewByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void FlatViewByDate2CompletedEventHandler(object sender, FlatViewByDate2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FlatViewByDate2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FlatViewByDate2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void FlatViewByTitleCompletedEventHandler(object sender, FlatViewByTitleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FlatViewByTitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FlatViewByTitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetSeriesCompletedEventHandler(object sender, GetSeriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSeriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSeriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetSeriesByRangeCompletedEventHandler(object sender, GetSeriesByRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSeriesByRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSeriesByRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetItemsBySeriesWithFilterCompletedEventHandler(object sender, GetItemsBySeriesWithFilterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemsBySeriesWithFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemsBySeriesWithFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetSeriesWithFilterCompletedEventHandler(object sender, GetSeriesWithFilterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSeriesWithFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSeriesWithFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetItemsByFolderWithFilterCompletedEventHandler(object sender, GetItemsByFolderWithFilterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemsByFolderWithFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemsByFolderWithFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetFolderWithFilterCompletedEventHandler(object sender, GetFolderWithFilterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderWithFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderWithFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetItemsBySeriesCompletedEventHandler(object sender, GetItemsBySeriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemsBySeriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemsBySeriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetItemsByFolderCompletedEventHandler(object sender, GetItemsByFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemsByFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemsByFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetItemsByJobCompletedEventHandler(object sender, GetItemsByJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemsByJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemsByJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetMediaByFullNameCompletedEventHandler(object sender, GetMediaByFullNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMediaByFullNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMediaByFullNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDriveInformationByNameCompletedEventHandler(object sender, GetDriveInformationByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDriveInformationByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDriveInformationByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AdvancedSearchCCCompletedEventHandler(object sender, AdvancedSearchCCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdvancedSearchCCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdvancedSearchCCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int numberOfPages {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int numberOfResults {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AdvancedSearchCCWithSuggestionCompletedEventHandler(object sender, AdvancedSearchCCWithSuggestionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdvancedSearchCCWithSuggestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdvancedSearchCCWithSuggestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int numberOfPages {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int numberOfResults {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string suggestion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string suggestionFormatted {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetOldestUnlockedMediaDateTicksCompletedEventHandler(object sender, GetOldestUnlockedMediaDateTicksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOldestUnlockedMediaDateTicksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOldestUnlockedMediaDateTicksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AdvancedSearchCCCountCompletedEventHandler(object sender, AdvancedSearchCCCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdvancedSearchCCCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdvancedSearchCCCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AdvancedSearchCCCountWithSuggestionCompletedEventHandler(object sender, AdvancedSearchCCCountWithSuggestionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdvancedSearchCCCountWithSuggestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdvancedSearchCCCountWithSuggestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string suggestion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string suggestionFormatted {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LuceneHighlightStringCompletedEventHandler(object sender, LuceneHighlightStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LuceneHighlightStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LuceneHighlightStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetStatsInformationCompletedEventHandler(object sender, GetStatsInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatsInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatsInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetFolderMediaCountCompletedEventHandler(object sender, GetFolderMediaCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderMediaCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderMediaCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591