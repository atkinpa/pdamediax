//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace MCESchedule.BTVLicenseManager {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BTVLicenseManagerSoap", Namespace="http://www.snapstream.com/WebService")]
    public partial class BTVLicenseManager : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenewLogonSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogonRemoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcceptAuthenticateRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcceptClientResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogonWindowsAuthOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrincipalServerNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CleanupLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoffOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPermissionsForTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback CanChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogLinkInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BTVLicenseManager() {
            this.Url = global::MCESchedule.Properties.Settings.Default.MCESchedule_BTVLicenseManager_BTVLicenseManager;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LogonCompletedEventHandler LogonCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event RenewLogonSessionCompletedEventHandler RenewLogonSessionCompleted;
        
        /// <remarks/>
        public event LogonRemoteCompletedEventHandler LogonRemoteCompleted;
        
        /// <remarks/>
        public event AcceptAuthenticateRequestCompletedEventHandler AcceptAuthenticateRequestCompleted;
        
        /// <remarks/>
        public event AcceptClientResponseCompletedEventHandler AcceptClientResponseCompleted;
        
        /// <remarks/>
        public event LogonWindowsAuthCompletedEventHandler LogonWindowsAuthCompleted;
        
        /// <remarks/>
        public event PrincipalServerNameCompletedEventHandler PrincipalServerNameCompleted;
        
        /// <remarks/>
        public event CleanupLoginCompletedEventHandler CleanupLoginCompleted;
        
        /// <remarks/>
        public event LogoffCompletedEventHandler LogoffCompleted;
        
        /// <remarks/>
        public event GetPermissionsForTicketCompletedEventHandler GetPermissionsForTicketCompleted;
        
        /// <remarks/>
        public event CanChangePasswordCompletedEventHandler CanChangePasswordCompleted;
        
        /// <remarks/>
        public event GetVersionNumberCompletedEventHandler GetVersionNumberCompleted;
        
        /// <remarks/>
        public event LogLinkInfoCompletedEventHandler LogLinkInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/Logon", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag Logon(string networkLicense, string username, string password) {
            object[] results = this.Invoke("Logon", new object[] {
                        networkLicense,
                        username,
                        password});
            return ((PVSPropertyBag)(results[0]));
        }
        
        /// <remarks/>
        public void LogonAsync(string networkLicense, string username, string password) {
            this.LogonAsync(networkLicense, username, password, null);
        }
        
        /// <remarks/>
        public void LogonAsync(string networkLicense, string username, string password, object userState) {
            if ((this.LogonOperationCompleted == null)) {
                this.LogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonOperationCompleted);
            }
            this.InvokeAsync("Logon", new object[] {
                        networkLicense,
                        username,
                        password}, this.LogonOperationCompleted, userState);
        }
        
        private void OnLogonOperationCompleted(object arg) {
            if ((this.LogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonCompleted(this, new LogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/ChangePassword", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangePassword(string authTicket, string oldPassword, string newPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        authTicket,
                        oldPassword,
                        newPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string authTicket, string oldPassword, string newPassword) {
            this.ChangePasswordAsync(authTicket, oldPassword, newPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string authTicket, string oldPassword, string newPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        authTicket,
                        oldPassword,
                        newPassword}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/RenewLogonSession", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RenewLogonSession(string authTicket) {
            object[] results = this.Invoke("RenewLogonSession", new object[] {
                        authTicket});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RenewLogonSessionAsync(string authTicket) {
            this.RenewLogonSessionAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void RenewLogonSessionAsync(string authTicket, object userState) {
            if ((this.RenewLogonSessionOperationCompleted == null)) {
                this.RenewLogonSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenewLogonSessionOperationCompleted);
            }
            this.InvokeAsync("RenewLogonSession", new object[] {
                        authTicket}, this.RenewLogonSessionOperationCompleted, userState);
        }
        
        private void OnRenewLogonSessionOperationCompleted(object arg) {
            if ((this.RenewLogonSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenewLogonSessionCompleted(this, new RenewLogonSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/LogonRemote", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag LogonRemote(string networkLicense, string username, string password) {
            object[] results = this.Invoke("LogonRemote", new object[] {
                        networkLicense,
                        username,
                        password});
            return ((PVSPropertyBag)(results[0]));
        }
        
        /// <remarks/>
        public void LogonRemoteAsync(string networkLicense, string username, string password) {
            this.LogonRemoteAsync(networkLicense, username, password, null);
        }
        
        /// <remarks/>
        public void LogonRemoteAsync(string networkLicense, string username, string password, object userState) {
            if ((this.LogonRemoteOperationCompleted == null)) {
                this.LogonRemoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonRemoteOperationCompleted);
            }
            this.InvokeAsync("LogonRemote", new object[] {
                        networkLicense,
                        username,
                        password}, this.LogonRemoteOperationCompleted, userState);
        }
        
        private void OnLogonRemoteOperationCompleted(object arg) {
            if ((this.LogonRemoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonRemoteCompleted(this, new LogonRemoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AcceptAuthenticateRequest", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] AcceptAuthenticateRequest([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] clientToken) {
            object[] results = this.Invoke("AcceptAuthenticateRequest", new object[] {
                        clientToken});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void AcceptAuthenticateRequestAsync(byte[] clientToken) {
            this.AcceptAuthenticateRequestAsync(clientToken, null);
        }
        
        /// <remarks/>
        public void AcceptAuthenticateRequestAsync(byte[] clientToken, object userState) {
            if ((this.AcceptAuthenticateRequestOperationCompleted == null)) {
                this.AcceptAuthenticateRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcceptAuthenticateRequestOperationCompleted);
            }
            this.InvokeAsync("AcceptAuthenticateRequest", new object[] {
                        clientToken}, this.AcceptAuthenticateRequestOperationCompleted, userState);
        }
        
        private void OnAcceptAuthenticateRequestOperationCompleted(object arg) {
            if ((this.AcceptAuthenticateRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcceptAuthenticateRequestCompleted(this, new AcceptAuthenticateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/AcceptClientResponse", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] AcceptClientResponse([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] oldClientToken, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] clientToken) {
            object[] results = this.Invoke("AcceptClientResponse", new object[] {
                        oldClientToken,
                        clientToken});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void AcceptClientResponseAsync(byte[] oldClientToken, byte[] clientToken) {
            this.AcceptClientResponseAsync(oldClientToken, clientToken, null);
        }
        
        /// <remarks/>
        public void AcceptClientResponseAsync(byte[] oldClientToken, byte[] clientToken, object userState) {
            if ((this.AcceptClientResponseOperationCompleted == null)) {
                this.AcceptClientResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcceptClientResponseOperationCompleted);
            }
            this.InvokeAsync("AcceptClientResponse", new object[] {
                        oldClientToken,
                        clientToken}, this.AcceptClientResponseOperationCompleted, userState);
        }
        
        private void OnAcceptClientResponseOperationCompleted(object arg) {
            if ((this.AcceptClientResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcceptClientResponseCompleted(this, new AcceptClientResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/LogonWindowsAuth", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PVSPropertyBag LogonWindowsAuth(string networkLicense, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] clientToken) {
            object[] results = this.Invoke("LogonWindowsAuth", new object[] {
                        networkLicense,
                        clientToken});
            return ((PVSPropertyBag)(results[0]));
        }
        
        /// <remarks/>
        public void LogonWindowsAuthAsync(string networkLicense, byte[] clientToken) {
            this.LogonWindowsAuthAsync(networkLicense, clientToken, null);
        }
        
        /// <remarks/>
        public void LogonWindowsAuthAsync(string networkLicense, byte[] clientToken, object userState) {
            if ((this.LogonWindowsAuthOperationCompleted == null)) {
                this.LogonWindowsAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonWindowsAuthOperationCompleted);
            }
            this.InvokeAsync("LogonWindowsAuth", new object[] {
                        networkLicense,
                        clientToken}, this.LogonWindowsAuthOperationCompleted, userState);
        }
        
        private void OnLogonWindowsAuthOperationCompleted(object arg) {
            if ((this.LogonWindowsAuthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonWindowsAuthCompleted(this, new LogonWindowsAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/PrincipalServerName", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrincipalServerName() {
            object[] results = this.Invoke("PrincipalServerName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrincipalServerNameAsync() {
            this.PrincipalServerNameAsync(null);
        }
        
        /// <remarks/>
        public void PrincipalServerNameAsync(object userState) {
            if ((this.PrincipalServerNameOperationCompleted == null)) {
                this.PrincipalServerNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrincipalServerNameOperationCompleted);
            }
            this.InvokeAsync("PrincipalServerName", new object[0], this.PrincipalServerNameOperationCompleted, userState);
        }
        
        private void OnPrincipalServerNameOperationCompleted(object arg) {
            if ((this.PrincipalServerNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrincipalServerNameCompleted(this, new PrincipalServerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/CleanupLogin", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CleanupLogin([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] clientToken) {
            this.Invoke("CleanupLogin", new object[] {
                        clientToken});
        }
        
        /// <remarks/>
        public void CleanupLoginAsync(byte[] clientToken) {
            this.CleanupLoginAsync(clientToken, null);
        }
        
        /// <remarks/>
        public void CleanupLoginAsync(byte[] clientToken, object userState) {
            if ((this.CleanupLoginOperationCompleted == null)) {
                this.CleanupLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCleanupLoginOperationCompleted);
            }
            this.InvokeAsync("CleanupLogin", new object[] {
                        clientToken}, this.CleanupLoginOperationCompleted, userState);
        }
        
        private void OnCleanupLoginOperationCompleted(object arg) {
            if ((this.CleanupLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CleanupLoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/Logoff", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logoff(string ticket) {
            this.Invoke("Logoff", new object[] {
                        ticket});
        }
        
        /// <remarks/>
        public void LogoffAsync(string ticket) {
            this.LogoffAsync(ticket, null);
        }
        
        /// <remarks/>
        public void LogoffAsync(string ticket, object userState) {
            if ((this.LogoffOperationCompleted == null)) {
                this.LogoffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoffOperationCompleted);
            }
            this.InvokeAsync("Logoff", new object[] {
                        ticket}, this.LogoffOperationCompleted, userState);
        }
        
        private void OnLogoffOperationCompleted(object arg) {
            if ((this.LogoffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoffCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetPermissionsForTicket", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPermissionsForTicket(string authTicket) {
            object[] results = this.Invoke("GetPermissionsForTicket", new object[] {
                        authTicket});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPermissionsForTicketAsync(string authTicket) {
            this.GetPermissionsForTicketAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void GetPermissionsForTicketAsync(string authTicket, object userState) {
            if ((this.GetPermissionsForTicketOperationCompleted == null)) {
                this.GetPermissionsForTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermissionsForTicketOperationCompleted);
            }
            this.InvokeAsync("GetPermissionsForTicket", new object[] {
                        authTicket}, this.GetPermissionsForTicketOperationCompleted, userState);
        }
        
        private void OnGetPermissionsForTicketOperationCompleted(object arg) {
            if ((this.GetPermissionsForTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermissionsForTicketCompleted(this, new GetPermissionsForTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/CanChangePassword", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CanChangePassword(string authTicket) {
            object[] results = this.Invoke("CanChangePassword", new object[] {
                        authTicket});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CanChangePasswordAsync(string authTicket) {
            this.CanChangePasswordAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void CanChangePasswordAsync(string authTicket, object userState) {
            if ((this.CanChangePasswordOperationCompleted == null)) {
                this.CanChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCanChangePasswordOperationCompleted);
            }
            this.InvokeAsync("CanChangePassword", new object[] {
                        authTicket}, this.CanChangePasswordOperationCompleted, userState);
        }
        
        private void OnCanChangePasswordOperationCompleted(object arg) {
            if ((this.CanChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CanChangePasswordCompleted(this, new CanChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetVersionNumber", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersionNumber() {
            object[] results = this.Invoke("GetVersionNumber", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionNumberAsync() {
            this.GetVersionNumberAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionNumberAsync(object userState) {
            if ((this.GetVersionNumberOperationCompleted == null)) {
                this.GetVersionNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionNumberOperationCompleted);
            }
            this.InvokeAsync("GetVersionNumber", new object[0], this.GetVersionNumberOperationCompleted, userState);
        }
        
        private void OnGetVersionNumberOperationCompleted(object arg) {
            if ((this.GetVersionNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionNumberCompleted(this, new GetVersionNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/LogLinkInfo", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogLinkInfo(string macAddress, string authticket) {
            this.Invoke("LogLinkInfo", new object[] {
                        macAddress,
                        authticket});
        }
        
        /// <remarks/>
        public void LogLinkInfoAsync(string macAddress, string authticket) {
            this.LogLinkInfoAsync(macAddress, authticket, null);
        }
        
        /// <remarks/>
        public void LogLinkInfoAsync(string macAddress, string authticket, object userState) {
            if ((this.LogLinkInfoOperationCompleted == null)) {
                this.LogLinkInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogLinkInfoOperationCompleted);
            }
            this.InvokeAsync("LogLinkInfo", new object[] {
                        macAddress,
                        authticket}, this.LogLinkInfoOperationCompleted, userState);
        }
        
        private void OnLogLinkInfoOperationCompleted(object arg) {
            if ((this.LogLinkInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogLinkInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.snapstream.com/types")]
    public partial class PVSPropertyBag {
        
        private PVSProperty[] propertiesField;
        
        /// <remarks/>
        public PVSProperty[] Properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.snapstream.com/types")]
    public partial class PVSProperty {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LogonCompletedEventHandler(object sender, LogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void RenewLogonSessionCompletedEventHandler(object sender, RenewLogonSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenewLogonSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenewLogonSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LogonRemoteCompletedEventHandler(object sender, LogonRemoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonRemoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonRemoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AcceptAuthenticateRequestCompletedEventHandler(object sender, AcceptAuthenticateRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AcceptAuthenticateRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AcceptAuthenticateRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AcceptClientResponseCompletedEventHandler(object sender, AcceptClientResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AcceptClientResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AcceptClientResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LogonWindowsAuthCompletedEventHandler(object sender, LogonWindowsAuthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonWindowsAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonWindowsAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PVSPropertyBag Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PVSPropertyBag)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void PrincipalServerNameCompletedEventHandler(object sender, PrincipalServerNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrincipalServerNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrincipalServerNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CleanupLoginCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LogoffCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetPermissionsForTicketCompletedEventHandler(object sender, GetPermissionsForTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermissionsForTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermissionsForTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CanChangePasswordCompletedEventHandler(object sender, CanChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CanChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CanChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetVersionNumberCompletedEventHandler(object sender, GetVersionNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LogLinkInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591