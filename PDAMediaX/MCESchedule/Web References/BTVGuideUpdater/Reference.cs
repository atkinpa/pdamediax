//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace MCESchedule.BTVGuideUpdater {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BTVGuideUpdaterSoap", Namespace="http://www.snapstream.com/WebService")]
    public partial class BTVGuideUpdater : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetLastSuccessfulUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastAttemptedUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextAttemptedUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPropertyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProgressOperationCompleted;
        
        private System.Threading.SendOrPostCallback TVTVUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemoteRecordingsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BTVGuideUpdater() {
            this.Url = global::MCESchedule.Properties.Settings.Default.MCESchedule_BTVGuideUpdater_BTVGuideUpdater;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetLastSuccessfulUpdateCompletedEventHandler GetLastSuccessfulUpdateCompleted;
        
        /// <remarks/>
        public event GetLastAttemptedUpdateCompletedEventHandler GetLastAttemptedUpdateCompleted;
        
        /// <remarks/>
        public event GetNextAttemptedUpdateCompletedEventHandler GetNextAttemptedUpdateCompleted;
        
        /// <remarks/>
        public event StartUpdateCompletedEventHandler StartUpdateCompleted;
        
        /// <remarks/>
        public event CancelUpdateCompletedEventHandler CancelUpdateCompleted;
        
        /// <remarks/>
        public event SetPropertyCompletedEventHandler SetPropertyCompleted;
        
        /// <remarks/>
        public event GetProgressCompletedEventHandler GetProgressCompleted;
        
        /// <remarks/>
        public event TVTVUpdateCompletedEventHandler TVTVUpdateCompleted;
        
        /// <remarks/>
        public event GetRemoteRecordingsCompletedEventHandler GetRemoteRecordingsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetLastSuccessfulUpdate", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ulong GetLastSuccessfulUpdate(string authTicket) {
            object[] results = this.Invoke("GetLastSuccessfulUpdate", new object[] {
                        authTicket});
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastSuccessfulUpdateAsync(string authTicket) {
            this.GetLastSuccessfulUpdateAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void GetLastSuccessfulUpdateAsync(string authTicket, object userState) {
            if ((this.GetLastSuccessfulUpdateOperationCompleted == null)) {
                this.GetLastSuccessfulUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastSuccessfulUpdateOperationCompleted);
            }
            this.InvokeAsync("GetLastSuccessfulUpdate", new object[] {
                        authTicket}, this.GetLastSuccessfulUpdateOperationCompleted, userState);
        }
        
        private void OnGetLastSuccessfulUpdateOperationCompleted(object arg) {
            if ((this.GetLastSuccessfulUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastSuccessfulUpdateCompleted(this, new GetLastSuccessfulUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetLastAttemptedUpdate", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ulong GetLastAttemptedUpdate(string authTicket) {
            object[] results = this.Invoke("GetLastAttemptedUpdate", new object[] {
                        authTicket});
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastAttemptedUpdateAsync(string authTicket) {
            this.GetLastAttemptedUpdateAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void GetLastAttemptedUpdateAsync(string authTicket, object userState) {
            if ((this.GetLastAttemptedUpdateOperationCompleted == null)) {
                this.GetLastAttemptedUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastAttemptedUpdateOperationCompleted);
            }
            this.InvokeAsync("GetLastAttemptedUpdate", new object[] {
                        authTicket}, this.GetLastAttemptedUpdateOperationCompleted, userState);
        }
        
        private void OnGetLastAttemptedUpdateOperationCompleted(object arg) {
            if ((this.GetLastAttemptedUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastAttemptedUpdateCompleted(this, new GetLastAttemptedUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetNextAttemptedUpdate", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ulong GetNextAttemptedUpdate(string authTicket) {
            object[] results = this.Invoke("GetNextAttemptedUpdate", new object[] {
                        authTicket});
            return ((ulong)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextAttemptedUpdateAsync(string authTicket) {
            this.GetNextAttemptedUpdateAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void GetNextAttemptedUpdateAsync(string authTicket, object userState) {
            if ((this.GetNextAttemptedUpdateOperationCompleted == null)) {
                this.GetNextAttemptedUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextAttemptedUpdateOperationCompleted);
            }
            this.InvokeAsync("GetNextAttemptedUpdate", new object[] {
                        authTicket}, this.GetNextAttemptedUpdateOperationCompleted, userState);
        }
        
        private void OnGetNextAttemptedUpdateOperationCompleted(object arg) {
            if ((this.GetNextAttemptedUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextAttemptedUpdateCompleted(this, new GetNextAttemptedUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/StartUpdate", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartUpdate(string authTicket) {
            this.Invoke("StartUpdate", new object[] {
                        authTicket});
        }
        
        /// <remarks/>
        public void StartUpdateAsync(string authTicket) {
            this.StartUpdateAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void StartUpdateAsync(string authTicket, object userState) {
            if ((this.StartUpdateOperationCompleted == null)) {
                this.StartUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartUpdateOperationCompleted);
            }
            this.InvokeAsync("StartUpdate", new object[] {
                        authTicket}, this.StartUpdateOperationCompleted, userState);
        }
        
        private void OnStartUpdateOperationCompleted(object arg) {
            if ((this.StartUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/CancelUpdate", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelUpdate(string authTicket) {
            this.Invoke("CancelUpdate", new object[] {
                        authTicket});
        }
        
        /// <remarks/>
        public void CancelUpdateAsync(string authTicket) {
            this.CancelUpdateAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void CancelUpdateAsync(string authTicket, object userState) {
            if ((this.CancelUpdateOperationCompleted == null)) {
                this.CancelUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelUpdateOperationCompleted);
            }
            this.InvokeAsync("CancelUpdate", new object[] {
                        authTicket}, this.CancelUpdateOperationCompleted, userState);
        }
        
        private void OnCancelUpdateOperationCompleted(object arg) {
            if ((this.CancelUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/SetProperty", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetProperty(string authTicket, string name, string val) {
            this.Invoke("SetProperty", new object[] {
                        authTicket,
                        name,
                        val});
        }
        
        /// <remarks/>
        public void SetPropertyAsync(string authTicket, string name, string val) {
            this.SetPropertyAsync(authTicket, name, val, null);
        }
        
        /// <remarks/>
        public void SetPropertyAsync(string authTicket, string name, string val, object userState) {
            if ((this.SetPropertyOperationCompleted == null)) {
                this.SetPropertyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPropertyOperationCompleted);
            }
            this.InvokeAsync("SetProperty", new object[] {
                        authTicket,
                        name,
                        val}, this.SetPropertyOperationCompleted, userState);
        }
        
        private void OnSetPropertyOperationCompleted(object arg) {
            if ((this.SetPropertyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPropertyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetProgress", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint GetProgress(string authTicket, out string state, out string message) {
            object[] results = this.Invoke("GetProgress", new object[] {
                        authTicket});
            state = ((string)(results[1]));
            message = ((string)(results[2]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void GetProgressAsync(string authTicket) {
            this.GetProgressAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void GetProgressAsync(string authTicket, object userState) {
            if ((this.GetProgressOperationCompleted == null)) {
                this.GetProgressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProgressOperationCompleted);
            }
            this.InvokeAsync("GetProgress", new object[] {
                        authTicket}, this.GetProgressOperationCompleted, userState);
        }
        
        private void OnGetProgressOperationCompleted(object arg) {
            if ((this.GetProgressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProgressCompleted(this, new GetProgressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/TVTVUpdate", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint TVTVUpdate(string authTicket) {
            object[] results = this.Invoke("TVTVUpdate", new object[] {
                        authTicket});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void TVTVUpdateAsync(string authTicket) {
            this.TVTVUpdateAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void TVTVUpdateAsync(string authTicket, object userState) {
            if ((this.TVTVUpdateOperationCompleted == null)) {
                this.TVTVUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTVTVUpdateOperationCompleted);
            }
            this.InvokeAsync("TVTVUpdate", new object[] {
                        authTicket}, this.TVTVUpdateOperationCompleted, userState);
        }
        
        private void OnTVTVUpdateOperationCompleted(object arg) {
            if ((this.TVTVUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TVTVUpdateCompleted(this, new TVTVUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.snapstream.com/WebService/GetRemoteRecordings", RequestNamespace="http://www.snapstream.com/WebService", ResponseNamespace="http://www.snapstream.com/WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint GetRemoteRecordings(string authTicket) {
            object[] results = this.Invoke("GetRemoteRecordings", new object[] {
                        authTicket});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void GetRemoteRecordingsAsync(string authTicket) {
            this.GetRemoteRecordingsAsync(authTicket, null);
        }
        
        /// <remarks/>
        public void GetRemoteRecordingsAsync(string authTicket, object userState) {
            if ((this.GetRemoteRecordingsOperationCompleted == null)) {
                this.GetRemoteRecordingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteRecordingsOperationCompleted);
            }
            this.InvokeAsync("GetRemoteRecordings", new object[] {
                        authTicket}, this.GetRemoteRecordingsOperationCompleted, userState);
        }
        
        private void OnGetRemoteRecordingsOperationCompleted(object arg) {
            if ((this.GetRemoteRecordingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemoteRecordingsCompleted(this, new GetRemoteRecordingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLastSuccessfulUpdateCompletedEventHandler(object sender, GetLastSuccessfulUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastSuccessfulUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastSuccessfulUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ulong Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ulong)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLastAttemptedUpdateCompletedEventHandler(object sender, GetLastAttemptedUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastAttemptedUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastAttemptedUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ulong Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ulong)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetNextAttemptedUpdateCompletedEventHandler(object sender, GetNextAttemptedUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextAttemptedUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextAttemptedUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ulong Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ulong)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StartUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CancelUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetPropertyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetProgressCompletedEventHandler(object sender, GetProgressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProgressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProgressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string state {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void TVTVUpdateCompletedEventHandler(object sender, TVTVUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TVTVUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TVTVUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetRemoteRecordingsCompletedEventHandler(object sender, GetRemoteRecordingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemoteRecordingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemoteRecordingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591